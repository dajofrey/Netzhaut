#ifndef NH_HTML_TOKENIZER_H
#define NH_HTML_TOKENIZER_H

/**
 * Netzhaut - Web Browser Engine
 * Copyright (C) 2022  Dajo Frey
 * Published under GNU LGPL. See Netzhaut/LICENSE.LGPL file.
 */

#include "../Common/Includes.h"

#include "../../nh-webidl/Runtime/String.h"
#include "../../nh-core/Util/ArrayList.h"

// ENUMS ===========================================================================================

typedef enum NH_HTML_TOKENIZATION_STATE {
    NH_HTML_TOKENIZATION_STATE_DATA, 
    NH_HTML_TOKENIZATION_STATE_RCDATA, 
    NH_HTML_TOKENIZATION_STATE_RAWTEXT,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA,
    NH_HTML_TOKENIZATION_STATE_PLAINTEXT,
    NH_HTML_TOKENIZATION_STATE_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_END_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_TAG_NAME,
    NH_HTML_TOKENIZATION_STATE_RCDATA_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_RCDATA_END_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_RCDATA_END_TAG_NAME,
    NH_HTML_TOKENIZATION_STATE_RAWTEXT_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_RAWTEXT_END_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_RAWTEXT_END_TAG_NAME,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_END_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_END_TAG_NAME,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPE_START,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPE_START_DASH,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED_DASH,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED_DASH_DASH, 
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED_END_TAG_OPEN,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_ESCAPED_END_TAG_NAME,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPE_START,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPED,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPED_DASH,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_SCRIPT_DATA_DOUBLE_ESCAPE_END,
    NH_HTML_TOKENIZATION_STATE_BEFORE_ATTRIBUTE_NAME,
    NH_HTML_TOKENIZATION_STATE_ATTRIBUTE_NAME,
    NH_HTML_TOKENIZATION_STATE_AFTER_ATTRIBUTE_NAME,
    NH_HTML_TOKENIZATION_STATE_BEFORE_ATTRIBUTE_VALUE,
    NH_HTML_TOKENIZATION_STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_ATTRIBUTE_VALUE_UNQUOTED,
    NH_HTML_TOKENIZATION_STATE_AFTER_ATTRIBUTE_VALUE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_SELF_CLOSING_START_TAG,
    NH_HTML_TOKENIZATION_STATE_BOGUS_COMMENT,
    NH_HTML_TOKENIZATION_STATE_MARKUP_DECLARATION_OPEN,
    NH_HTML_TOKENIZATION_STATE_COMMENT_START,
    NH_HTML_TOKENIZATION_STATE_COMMENT_START_DASH,
    NH_HTML_TOKENIZATION_STATE_COMMENT,
    NH_HTML_TOKENIZATION_STATE_COMMENT_LESS_THAN_SIGN,
    NH_HTML_TOKENIZATION_STATE_COMMENT_LESS_THAN_SIGN_BANG,
    NH_HTML_TOKENIZATION_STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH,
    NH_HTML_TOKENIZATION_STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH,
    NH_HTML_TOKENIZATION_STATE_COMMENT_END_DASH,
    NH_HTML_TOKENIZATION_STATE_COMMENT_END,
    NH_HTML_TOKENIZATION_STATE_COMMENT_END_BANG,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE,
    NH_HTML_TOKENIZATION_STATE_BEFORE_DOCTYPE_NAME,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE_NAME,
    NH_HTML_TOKENIZATION_STATE_AFTER_DOCTYPE_NAME,
    NH_HTML_TOKENIZATION_STATE_AFTER_DOCTYPE_PUBLIC_KEYWORD,
    NH_HTML_TOKENIZATION_STATE_BEFORE_DOCTYPE_PUBLIC_IDENTIFIER,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_AFTER_DOCTYPE_PUBLIC_IDENTIFIER,
    NH_HTML_TOKENIZATION_STATE_BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS,
    NH_HTML_TOKENIZATION_STATE_AFTER_DOCTYPE_SYSTEM_KEYWORD,
    NH_HTML_TOKENIZATION_STATE_BEFORE_DOCTYPE_SYSTEM_IDENTIFIER,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED,
    NH_HTML_TOKENIZATION_STATE_AFTER_DOCTYPE_SYSTEM_IDENTIFIER,
    NH_HTML_TOKENIZATION_STATE_BOGUS_DOCTYPE,
    NH_HTML_TOKENIZATION_STATE_CDATA_SECTION,
    NH_HTML_TOKENIZATION_STATE_CDATA_SECTION_BRACKET,
    NH_HTML_TOKENIZATION_STATE_CDATA_SECTION_END,
    NH_HTML_TOKENIZATION_STATE_CHARACTER_REFERENCE,
    NH_HTML_TOKENIZATION_STATE_NAMED_CHARACTER_REFERENCE,
    NH_HTML_TOKENIZATION_STATE_AMBIGUOUS_AMPERSAND,
    NH_HTML_TOKENIZATION_STATE_NUMERIC_CHARACTER_REFERENCE,
    NH_HTML_TOKENIZATION_STATE_HEXADECIMAL_CHARACTER_REFERENCE_START,
    NH_HTML_TOKENIZATION_STATE_DECIMAL_CHARACTER_REFERENCE_START,
    NH_HTML_TOKENIZATION_STATE_HEXADECIMAL_CHARACTER_REFERENCE,
    NH_HTML_TOKENIZATION_STATE_DECIMAL_CHARACTER_REFERENCE,
    NH_HTML_TOKENIZATION_STATE_NUMERIC_CHARACTER_REFERENCE_END,
} NH_HTML_TOKENIZATION_STATE;

typedef enum NH_HTML_TOKEN {
    NH_HTML_TOKEN_DOCTYPE, 
    NH_HTML_TOKEN_START_TAG, 
    NH_HTML_TOKEN_END_TAG, 
    NH_HTML_TOKEN_COMMENT, 
    NH_HTML_TOKEN_CHARACTER, 
    NH_HTML_TOKEN_END_OF_FILE,
} NH_HTML_TOKEN;

// STRUCTS =========================================================================================

typedef struct nh_html_DOCTYPEToken {
    NH_HTML_TOKEN type;
    nh_webidl_DOMString *Name_p;
    nh_webidl_DOMString *PublicIdentifier_p;
    nh_webidl_DOMString *SystemIdentifier_p;
    bool forceQuirks;
} nh_html_DOCTYPEToken;

typedef struct nh_html_Attribute {
    nh_webidl_DOMString Name;
    nh_webidl_DOMString Value;
} nh_html_Attribute;

typedef struct nh_html_StartOrEndTagToken {
    NH_HTML_TOKEN type;
    nh_webidl_DOMString TagName;
    bool selfClosing;
    nh_core_Array Attributes;
    int tag;
} nh_html_StartOrEndTagToken;

typedef struct nh_html_CommentOrCharacterToken {
    NH_HTML_TOKEN type;
    nh_webidl_DOMString Data;
} nh_html_CommentOrCharacterToken;

typedef union nh_html_Token {
    NH_HTML_TOKEN type;
    nh_html_DOCTYPEToken DOCTYPE;
    nh_html_StartOrEndTagToken StartOrEndTag;
    nh_html_CommentOrCharacterToken CommentOrCharacter;
} nh_html_Token;

typedef struct nh_html_Tokenizer {
    NH_HTML_TOKENIZATION_STATE state;
    NH_HTML_TOKENIZATION_STATE returnState;
    nh_webidl_USVString InputStream;
    nh_core_ArrayList Tokens;
    nh_core_List Emits;
    unsigned long index;
    NH_ENCODING_UTF32 codepoint;
    nh_html_Token *Token_p;
    nh_webidl_USVString TemporaryBuffer;    
    void *Parser_p;
} nh_html_Tokenizer;

// FUNCTIONS =======================================================================================

nh_html_Tokenizer nh_html_initTokenizer(
    void *Parser_p, nh_webidl_USVString InputStream
);

NH_API_RESULT nh_html_consumeNext(
    nh_html_Tokenizer *Tokenizer_p
);

#endif
